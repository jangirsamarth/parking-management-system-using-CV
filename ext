

# File: D:\Development\parking-management-system-using-CV\number_plate_detector\entry_detector.py

import time
import cv2
import imutils
import mysql.connector
import numpy as np
import pytesseract
import re
from datetime import datetime

# Initialize logging
import logging
logging.basicConfig(level=logging.INFO)

# Using SQL for database management
try:
    mydb = mysql.connector.connect(
        host="localhost",
        user="root",
        password="12345678",
        database="spms"
    )
    mycursor = mydb.cursor()
except mysql.connector.Error as err:
    logging.error(f"Error: {err}")
    exit(1)

# Function to validate the format of the number plate
def is_valid_number_plate(text):
    pattern = re.compile(r'^[A-Z0-9]{1,10}$')
    return pattern.match(text) is not None

# Initialize the video capture object
cap = cv2.VideoCapture(0)

if not cap.isOpened():
    logging.error("Error: Could not open video capture.")
    exit(1)

# Continuously capture frames until a valid number plate is detected
while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Check if frame is captured
    if not ret:
        logging.error("Error: Could not read frame.")
        break

    # Resizing image
    image = imutils.resize(frame, width=500)

    # Display the original frame
    cv2.imshow("Original Image", image)

    # Removing colors (grayscaling)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    cv2.imshow("1 - Grayscale Conversion", gray)

    # Apply bilateral filter to remove noise
    gray = cv2.bilateralFilter(gray, 11, 17, 17)
    cv2.imshow("2 - Bilateral Filter", gray)

    # Using canny edge detection
    edged = cv2.Canny(gray, 170, 200)
    cv2.imshow("4 - Canny Edges", edged)

    # Find contours
    cnts, _ = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    cnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:30]
    NumberPlateCnt = None

    for c in cnts:
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        if len(approx) == 4:
            NumberPlateCnt = approx
            break

    # Check if a contour for the number plate is found
    if NumberPlateCnt is not None:
        # Masking the part other than the number plate
        mask = np.zeros(gray.shape, np.uint8)
        new_image = cv2.drawContours(mask, [NumberPlateCnt], 0, 255, -1)
        new_image = cv2.bitwise_and(image, image, mask=mask)
        cv2.namedWindow("Final_image", cv2.WINDOW_NORMAL)
        cv2.imshow("Final_image", new_image)

        # Configuration for Tesseract
        configr = '-l eng --oem 1 --psm 7'

        # Run Tesseract OCR on image
        text = pytesseract.image_to_string(new_image, config=configr).strip().replace(" ", "")

        # Check if OCR extracted valid text and if the format matches a valid number plate
        if text and is_valid_number_plate(text):
            # Get current time (in_time)
            in_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            car_number = text

            try:
                # Check if the number plate already exists
                check_query = "SELECT * FROM in_time WHERE car_number = %s;"
                mycursor.execute(check_query, (car_number,))
                result = mycursor.fetchone()
                mycursor.fetchall()  # Fetch remaining results to clear the buffer

                if result:
                    # If exists, delete the old entry
                    delete_query = "DELETE FROM in_time WHERE car_number = %s;"
                    mycursor.execute(delete_query, (car_number,))
                    mydb.commit()
                    logging.info(f"Deleted old entry for car number {car_number}")

                # Insert the new entry
                insert_query = "INSERT INTO in_time (car_number, in_time) VALUES (%s, %s);"
                mycursor.execute(insert_query, (car_number, in_time))
                mydb.commit()
                logging.info(f"Inserted new entry for car number {car_number}")

                # Print recognized text and break the loop
                logging.info("Number plate is = %s", text)
                break

            except mysql.connector.Error as err:
                logging.error(f"Database error: {err}")

    # Press 'q' to exit the loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture and close windows
cap.release()
cv2.destroyAllWindows()


# File: D:\Development\parking-management-system-using-CV\number_plate_detector\exit_detector.py

import time
import cv2
import imutils
import mysql.connector
import numpy as np
import pytesseract
import re
from datetime import datetime

# Connect to SQL database
mydb = mysql.connector.connect(
    host="localhost",
    user="root",
    password="12345678",
    database="spms"
)
mycursor = mydb.cursor()

# Function to validate the number plate format
def is_valid_number_plate(text):
    pattern = re.compile(r'^[A-Z0-9]{1,10}$')
    return pattern.match(text) is not None

# Initialize video capture
cap = cv2.VideoCapture(0)

# Continuously capture frames
while True:
    ret, frame = cap.read()

    if not ret:
        break

    # Resizing image
    image = imutils.resize(frame, width=500)

    # Display original frame
    cv2.imshow("Original Image", image)

    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    cv2.imshow("1 - Grayscale Conversion", gray)

    # Apply bilateral filter to remove noise
    gray = cv2.bilateralFilter(gray, 11, 17, 17)
    cv2.imshow("2 - Bilateral Filter", gray)

    # Apply Canny edge detection
    edged = cv2.Canny(gray, 170, 200)
    cv2.imshow("4 - Canny Edges", edged)

    # Find contours
    cnts, _ = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    cnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:30]
    NumberPlateCnt = None

    for c in cnts:
        peri = cv2.arcLength(c, True)
        approx = cv2.approxPolyDP(c, 0.02 * peri, True)
        if len(approx) == 4:
            NumberPlateCnt = approx
            break

    # Check if a contour for the number plate is found
    if NumberPlateCnt is not None:
        # Mask the part other than the number plate
        mask = np.zeros(gray.shape, np.uint8)
        new_image = cv2.drawContours(mask, [NumberPlateCnt], 0, 255, -1)
        new_image = cv2.bitwise_and(image, image, mask=mask)
        cv2.namedWindow("Final_image", cv2.WINDOW_NORMAL)
        cv2.imshow("Final_image", new_image)

        # Configure tesseract
        configr = '-l eng --oem 1 --psm 7'

        # Run tesseract OCR on image
        text = pytesseract.image_to_string(new_image, config=configr).strip().replace(" ", "")

        # Check if OCR extracted valid text and if the format matches a valid number plate
        if text and is_valid_number_plate(text):
            # Get current time (exit time)
            date_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # Correct MySQL format
            car_number = text

            # Check if the number plate exists in the database
            check_query = "SELECT in_time FROM in_time WHERE car_number = %s;"
            mycursor.execute(check_query, (car_number,))
            result = mycursor.fetchone()

            if result:
                # Convert the in_time from database into datetime format
                in_time = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
                out_time = datetime.strptime(date_time, '%Y-%m-%d %H:%M:%S')
                duration = (out_time - in_time).total_seconds() / 60  # duration in minutes

                # Calculate price (assuming a rate of 1 rupee per minute)
                price = duration * 1

                # Print details in the terminal
                print(f"Exit Time: {date_time}")
                print(f"Duration: {duration:.2f} minutes")
                print(f"Price for the stay: {price:.2f} rupees")

                # Remove the car entry from the in_time table
                delete_query = "DELETE FROM in_time WHERE car_number = %s;"
                mycursor.execute(delete_query, (car_number,))
                mydb.commit()

                # Insert record into the records table
                insert_query = "INSERT INTO records (car_number, in_time, out_time, duration, price) VALUES (%s, %s, %s, %s, %s);"
                mycursor.execute(insert_query, (car_number, result[0], date_time, duration, price))
                mydb.commit()

                print(f"Record inserted into the records table for car number {car_number}")

            else:
                print(f"No entry found for car number {car_number}")

            # Print recognized text (number plate)
            print(f"Number plate is = {text}")
            break

    # Press 'q' to exit the loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture and close windows
cap.release()
cv2.destroyAllWindows()


# File: D:\Development\parking-management-system-using-CV\Parking_Detector\main.py

import pickle
import cv2
import cvzone
import numpy as np

# Video feed
cap = cv2.VideoCapture("D:\Development\parking-management-system-using-CV\Parking Detector\Car Parking.mp4")

# Load existing parking positions
try:
    with open('CarParkPos4', 'rb') as f:
        posList = pickle.load(f)
except:
    posList = []

# SIZE OF BOX IN WHICH CAR IS
width, height = 67, 26

def checkParkingSpace(imgPro):
    spaceCounter = 0

    for pos in posList:
        x, y, w, h = pos  # Unpacking (x, y, w, h) instead of (x, y)

        imgCrop = imgPro[y:y + h, x:x + w]  # Adjust cropping based on (x, y, w, h)
        count = cv2.countNonZero(imgCrop)

        # SETTING THE THRESHOLD LIMIT FOR BINARY IMAGE
        if count < 400:
            color = (0, 255, 0)
            thickness = 2
            spaceCounter += 1
        else:
            color = (0, 0, 255)
            thickness = 1

        cv2.rectangle(img, (x, y), (x + w, y + h), color, thickness)
        cvzone.putTextRect(img, str(count), (x, y + h - 3), scale=1, thickness=1, offset=0, colorR=color)

    cvzone.putTextRect(img, f'Free: {spaceCounter}/{len(posList)}', (100, 50), scale=3, thickness=3, offset=20, colorR=(0, 200, 0))

while True:
    success, img = cap.read()
    
    if not success:
        print("Error: Unable to read the video frame or end of video reached.")
        break
    
    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(imgGray, (3, 3), 2)
    imgThreshold = cv2.adaptiveThreshold(imgBlur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 25, 16)
    imgMedian = cv2.medianBlur(imgThreshold, 5)
    kernel = np.ones((3, 3), np.uint8)
    imgDilate = cv2.dilate(imgMedian, kernel, iterations=1)

    checkParkingSpace(imgDilate)
    cv2.imshow("Image", img)
    cv2.waitKey(10)

cap.release()
cv2.destroyAllWindows()


# File: D:\Development\parking-management-system-using-CV\Parking_Detector\parking_space_detector_2.py

import pickle
import cv2
import numpy as np

# Load existing parking positions if available
try:
    with open('CarParkPos4', 'rb') as f:
        posList = pickle.load(f)
except:
    posList = []

def compute_iou(box1, box2):
    x1, y1, w1, h1 = box1
    x2, y2, w2, h2 = box2

    x_left = max(x1, x2)
    y_top = max(y1, y2)
    x_right = min(x1 + w1, x2 + w2)
    y_bottom = min(y1 + h1, y2 + h2)

    if x_right < x_left or y_bottom < y_top:
        return 0.0

    inter_area = (x_right - x_left) * (y_bottom - y_top)
    box1_area = w1 * h1
    box2_area = w2 * h2

    iou = inter_area / float(box1_area + box2_area - inter_area)
    return iou

def non_max_suppression(boxes, threshold=0.4):
    if len(boxes) == 0:
        return []

    boxes = sorted(boxes, key=lambda x: x[2] * x[3], reverse=True)

    selected_boxes = []
    while boxes:
        current_box = boxes.pop(0)
        selected_boxes.append(current_box)
        boxes = [box for box in boxes if compute_iou(current_box, box) < threshold]

    return selected_boxes

def auto_detect_parking_spots(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (3, 3), 1)
    thresh = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 15, 3)
    kernel = np.ones((3, 3), np.uint8)
    morph = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    edges = cv2.Canny(morph, 30, 120)

    contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    
    box_sizes = []
    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        x, y, w, h = cv2.boundingRect(approx)
        if 60 < w < 200 and 20 < h < 100:
            box_sizes.append((x, y, w, h))
    
    if box_sizes:
        median_w, median_h = np.median([b[2:] for b in box_sizes], axis=0).astype(int)
    else:
        median_w, median_h = 67, 26

    detected_pos = []
    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        x, y, w, h = cv2.boundingRect(approx)
        if 60 < w < 200 and 20 < h < 100:
            x = x + w // 2 - median_w // 2
            y = y + h // 2 - median_h // 2
            detected_pos.append((x, y, median_w, median_h))

    detected_pos = non_max_suppression(detected_pos, threshold=0.4)

    return detected_pos

# Updated function to handle entries with less than 4 values
def draw_parking_spots(img, posList):
    for pos in posList:
        if len(pos) == 4:
            x, y, w, h = pos
            cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 255), 2)
        else:
            print(f"Skipping position with incorrect format: {pos}")

def mouseClick(events, x, y, flags, params):
    global posList
    if events == cv2.EVENT_LBUTTONDOWN:
        posList.append((x, y, 67, 26))
    if events == cv2.EVENT_RBUTTONDOWN:
        for i, pos in enumerate(posList):
            if len(pos) == 4:
                x1, y1, w, h = pos
                if x1 < x < x1 + w and y1 < y < y1 + h:
                    posList.pop(i)
                    break

    with open('CarParkPos4', 'wb') as f:
        pickle.dump(posList, f)

while True:
    img = cv2.imread(r'D:\Development\parking-management-system-using-CV\Parking Detector\Car Parking.png')
    
    if img is None:
        print("Error: Image not found or unable to load.")
        break
    
    draw_parking_spots(img, posList)
    cv2.putText(img, "Press 'd' to detect spots, 'q' to quit.", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow("Image", img)
    cv2.setMouseCallback("Image", mouseClick)

    key = cv2.waitKey(1)

    if key == ord('q'):
        break
    elif key == ord('d'):
        posList = auto_detect_parking_spots(img)
        with open('CarParkPos4', 'wb') as f:
            pickle.dump(posList, f)

cv2.destroyAllWindows()


# File: D:\Development\parking-management-system-using-CV\Parking_Detector\tempCodeRunnerFile.py

import pickle
import cv2
import numpy as np

# Load existing parking positions if available
try:
    with open('CarParkPos4', 'rb') as f:
        posList = pickle.load(f)
except:
    posList = []

def compute_iou(box1, box2):
    x1, y1, w1, h1 = box1
    x2, y2, w2, h2 = box2

    # Compute the coordinates of the intersection rectangle
    x_left = max(x1, x2)
    y_top = max(y1, y2)
    x_right = min(x1 + w1, x2 + w2)
    y_bottom = min(y1 + h1, y2 + h2)

    # Compute the area of intersection rectangle
    if x_right < x_left or y_bottom < y_top:
        return 0.0

    inter_area = (x_right - x_left) * (y_bottom - y_top)

    # Compute the area of both rectangles
    box1_area = w1 * h1
    box2_area = w2 * h2

    # Compute the IoU
    iou = inter_area / float(box1_area + box2_area - inter_area)
    return iou

def non_max_suppression(boxes, threshold=0.4):
    if len(boxes) == 0:
        return []

    boxes = sorted(boxes, key=lambda x: x[2] * x[3], reverse=True)  # Sort by area of box

    selected_boxes = []
    while boxes:
        current_box = boxes.pop(0)
        selected_boxes.append(current_box)
        boxes = [box for box in boxes if compute_iou(current_box, box) < threshold]

    return selected_boxes

# Improved parking spot detection with consistent box size and enhanced accuracy
def auto_detect_parking_spots(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (3, 3), 1)  # Slightly reduce blur kernel size for sharper edges
    
    # Use a more refined adaptive thresholding
    thresh = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 15, 3)
    
    # Morphological operations to remove noise and close gaps
    kernel = np.ones((3, 3), np.uint8)
    morph = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    
    # More precise edge detection
    edges = cv2.Canny(morph, 30, 120)

    contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    
    # Find the median size of detected boxes
    box_sizes = []
    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        x, y, w, h = cv2.boundingRect(approx)
        if 60 < w < 200 and 20 < h < 100:  # Filter based on reasonable parking spot sizes
            box_sizes.append((x, y, w, h))
    
    if box_sizes:
        median_w, median_h = np.median([b[2:] for b in box_sizes], axis=0).astype(int)
    else:
        median_w, median_h = 67, 26  # Fallback to default size if no boxes are detected

    detected_pos = []
    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        x, y, w, h = cv2.boundingRect(approx)
        if 60 < w < 200 and 20 < h < 100:  # Filter based on reasonable parking spot sizes
            # Adjust position to align with the white parking lines
            x = x + w // 2 - median_w // 2
            y = y + h // 2 - median_h // 2
            detected_pos.append((x, y, median_w, median_h))

    # Apply non-maximum suppression
    detected_pos = non_max_suppression(detected_pos, threshold=0.4)

    return detected_pos

# Function to draw parking spots on the image
def draw_parking_spots(img, posList):
    for pos in posList:
        x, y, w, h = pos
        cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 255), 2)

# Mouse event callback to manually add or remove parking spots
def mouseClick(events, x, y, flags, params):
    global posList
    if events == cv2.EVENT_LBUTTONDOWN:
        posList.append((x, y, 67, 26))  # Default size for manually added spots
    if events == cv2.EVENT_RBUTTONDOWN:
        for i, pos in enumerate(posList):
            x1, y1, w, h = pos
            if x1 < x < x1 + w and y1 < y < y1 + h:
                posList.pop(i)
                break

    with open('CarParkPos4', 'wb') as f:
        pickle.dump(posList, f)

# Main loop to display the image and handle user interaction
while True:
    img = cv2.imread(r'D:\Development\parking-management-system-using-CV\Parking Detector\Car Parking.png')
    
    if img is None:
        print("Error: Image not found or unable to load.")
        break
    
    # Draw the existing parking spots
    draw_parking_spots(img, posList)

    # Add overlay message
    cv2.putText(img, "Press 'd' to detect spots, 'q' to quit.", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display the image with parking spots
    cv2.imshow("Image", img)

    # Enable manual add/remove functionality using mouse clicks
    cv2.setMouseCallback("Image", mouseClick)

    key = cv2.waitKey(1)

    if key == ord('q'):
        break
    elif key == ord('d'):  # Detect parking spots when 'd' is pressed
        posList = auto_detect_parking_spots(img)  # Replace the current list with detected positions
        with open('CarParkPos4', 'wb') as f:
            pickle.dump(posList, f)

cv2.destroyAllWindows()


# File: D:\Development\parking-management-system-using-CV\streamlit_app\dashboard.py

import streamlit as st
import pandas as pd
import mysql.connector

# Database connection
try:
    mydb = mysql.connector.connect(
        host="localhost",
        user="root",
        password="12345678",
        database="spms"
    )
    mycursor = mydb.cursor()
    st.write("Database connection successful.")
except mysql.connector.Error as err:
    st.write(f"Error: {err}")
    st.stop()

# Streamlit app
st.title("Smart Parking Management System Dashboard")

# Query to fetch data
def fetch_data(query):
    try:
        mycursor.execute(query)
        return mycursor.fetchall()
    except mysql.connector.Error as err:
        st.write(f"Error: {err}")
        return []

# Fetch entries data
st.subheader("Current Entries")
entries_query = "SELECT * FROM in_time;"
entries_data = fetch_data(entries_query)
if entries_data:
    entries_df = pd.DataFrame(entries_data, columns=["In Time", "Car Number"])
    st.write(entries_df)
else:
    st.write("No data available.")

# Fetch billing data
st.subheader("Billing Records")
billing_query = """
SELECT car_number, 
       in_time, 
       out_time,
       duration,
       price
FROM records;
"""
billing_data = fetch_data(billing_query)
if billing_data:
    billing_df = pd.DataFrame(billing_data, columns=["Car Number", "In Time", "Out Time", "Duration (minutes)", "Price (rupees)"])
    st.write(billing_df)
else:
    st.write("No billing records available.")

# Option to download data
st.subheader("Download Data")
if st.button('Download Current Entries'):
    if not entries_df.empty:
        entries_csv = entries_df.to_csv(index=False)
        st.download_button(label="Download CSV", data=entries_csv, file_name="entries_data.csv")
    else:
        st.write("No data to download.")

if st.button('Download Billing Records'):
    if not billing_df.empty:
        billing_csv = billing_df.to_csv(index=False)
        st.download_button(label="Download CSV", data=billing_csv, file_name="billing_records.csv")
    else:
        st.write("No data to download.")
